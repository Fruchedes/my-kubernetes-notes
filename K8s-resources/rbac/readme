Here's a concise guide on setting up Role-Based Access Control (RBAC) for managing service accounts in Kubernetes:

Step-by-Step Guide for RBAC Setup

1. Understand RBAC Components
Role: Grants permissions within a specific namespace.
ClusterRole: Grants permissions across the entire cluster.
RoleBinding: Binds a Role to a user or group within a namespace.
ClusterRoleBinding: Binds a ClusterRole to a user or group across the cluster.

2. Create a ClusterRole (for cluster-wide access)
Use a ClusterRole if you want to manage service accounts across the entire cluster.
---
Example YAML for ClusterRole:
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: service-account-admin
rules:
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["create", "get", "list", "watch", "update", "patch", "delete"]


3. Create a ClusterRoleBinding
Bind the ClusterRole to a user, group, or service account.

Example YAML for ClusterRoleBinding:
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: service-account-admin-binding
subjects:
- kind: User
  name: <username>  # Replace with the actual user or service account name
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: service-account-admin
  apiGroup: rbac.authorization.k8s.io


4. Create a Role and RoleBinding (for namespace-specific access)

If you want to limit permissions to a specific namespace, use a Role and RoleBinding.

Example YAML for Role:
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: service-account-admin
  namespace: <your-namespace>  # Replace with your target namespace
rules:
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["create", "get", "list", "watch", "update", "patch", "delete"]

Example YAML for RoleBinding:
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: service-account-admin-binding
  namespace: <your-namespace>  # Replace with your target namespace
subjects:
- kind: User
  name: <username>  # Replace with the actual user or service account name
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: service-account-admin
  apiGroup: rbac.authorization.k8s.io

5. Apply the YAML Files

Save the above YAML configurations to files and apply them using kubectl:
kubectl apply -f <file>.yaml

6. Verify Permissions

To check if the user has the correct permissions, use:
kubectl auth can-i create serviceaccounts --as <username>
Replace <username> with the actual user or service account name.

This setup will allow specified users to create, modify, and delete service accounts according to the RBAC rules defined.