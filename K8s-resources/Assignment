#create a nginx-pod
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
  namespace: frontend-nginx
  labels:
  app: nginx
spec:
  containers:
    - name: nginx-container
      image: nginx
      ports:
       - containerPort: 80
      livenessProbe:
        httpGet:
          path: /healthz
          port: 80
        periodSeconds: 10
        failureThreshold: 3
      readinessProbe:
        httpGet:
          path: /healthz
          port: 80
        periodSeconds: 5
        failureThreshold: 1
  
  

# create a namespace
---
apiVersion: v1
kind: Namespace
metadata:
  name: frontend-nginx
# create a service
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-nodeip
  namespace: frontend-nginx
spec:
  type: NodeIP 
  selector:
    app: nginx-app-1
  ports:
    - protocol: TCP
      port: 80 
      targetPort: 80
# create a configmap
# commands: ["bin/sh", "-c", "env"]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configmap
  namespace: frontend-nginx
data:
  nginx.conf: |
    server {
      listen 80;
      server_name localhost;
      location /healthz {
        return 200 'ok';
      }

      location /{
        root /usr/share/nginx/html; #specifies where directory where files would be served from
        index index.html;
      }
    }
# create a secret  
---
apiVersion: v1
kind: Secret
metadata:
  name: nginx-secret
  namespace: frondend-nginx
type: Opaque
data:
  secret-key: ZWR3aW4=

# Define a storage class
---
apiVersion: v1
kind: StorageClass
apiVersion: storage.k8s.io/v1beta1
metadata:
  name: my-storage-class
provisioner: docker.io/hostpath

# Create a persistent volume
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nginx-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 256Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"  # Adjust path as necessary
  persistentVolumeReclaimPolicy: Retain

# Create a PVC
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nginx-pvc
  namespace: frontend-nginx
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 256Mi # or standard


## create a deployment with configmap, secret, liveness and readiness probe
# create a namespace
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment-1
  namespace: frontend-nginx
  labels:
    app: nginx
spec:
  replicas: 2
  selector:
    matchlabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx-container
        image: nginx
        ports:
        volumeMounts:
        - containerPort: 80
        - name: nginx-configmap
          mountPath: "/etc/nginx/nginx.conf"
          subPath: nginx.conf
        - name: nginx-secret
          mountPath: "/etc/nginx/secret"
        - name: nginx-pv
          mouthpath: "/mnt/data"
      readinessProbe: # determines when a pod is ready to accept traffic
        httpGet:
          path: / healthz
          port: 80
        initialDelaySeconds: 5 
        periodSeconds: 10
      livenessProbe: #checks if the container is running as expected
        httpGet:
          path: /healthz # creates a script in the ngixconfig which checks the health
          port: 80
        initialDelaySeconds: 10
        periodSeconds: 15
        failureThreshold: 3
        successThreshold: 1
        timeoutSeconds: 1
        resources: 
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
      - name: nginx-config
        configMap:
          name: nginx-configmap

# Repeat the above template for deployment-2 and deployment-3
# deployment with  configmap, secret, PV, PVC, CSI, liveness and readiness probe
# create a namespace
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment-1
  namespace: frontend-nginx
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: nginx-app-1
    spec:
      containers:
      - name: nginx-container
        image: nginx
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      readinessProbe:
        httpGet:
          path: /
          port: 80
        initialDelaySeconds: 5
        periodSeconds: 10
      livenessProbe:
        httpGet:
          path: /
          port: 80
        initialDelaySeconds: 10
        periodSeconds: 15
        failureThreshold: 3
        successThreshold: 1
        timeoutSeconds: 1
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"